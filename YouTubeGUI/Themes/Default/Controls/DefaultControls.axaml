<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:renderers="clr-namespace:YouTubeScrap.Data.Renderers;assembly=YouTubeScrap"
        xmlns:extend="clr-namespace:YouTubeScrap.Data.Extend;assembly=YouTubeScrap"
        xmlns:xamlTools="clr-namespace:YouTubeGUI.Core.XamlTools"
        xmlns:i="using:Avalonia.Xaml.Interactivity"
        xmlns:ia="using:Avalonia.Xaml.Interactions.Core"
        xmlns:controls="clr-namespace:YouTubeGUI.Controls">
    <Design.PreviewWith>
        <Border Padding="20">
            <!-- Add Controls for Previewer Here -->
        </Border>
    </Design.PreviewWith>
    
    <!-- Custom -->
    <StyleInclude Source="/Themes/Default/Controls/Topbar.axaml"/>
    
    <!-- Default -->
    <StyleInclude Source="/Themes/Default/Controls/Button.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/Window.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/ToggleButton.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/ListBox.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/ListboxItem.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/ItemsPresenter.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/ScrollBar.axaml"/>
    <StyleInclude Source="/Themes/Default/Controls/TextBlock.axaml"/>
    
    <Styles.Resources>
        <xamlTools:NullToBoolConverter x:Key="BoolConverter"/>
        <xamlTools:IconConverter x:Key="IconConverter"/>
        <DataTemplate x:Key="{x:Type controls:ItemContents}" DataType="{x:Type controls:ItemContents}">
            <Border BorderThickness="1" BorderBrush="Orange">
                <controls:HomeContentListBox ContentItemList="{Binding Items}"/>
            </Border>
        </DataTemplate> <!-- Rich item -->
        <!-- Home content list templates -->
        <DataTemplate x:Key="{x:Type renderers:VideoRenderer}" DataType="{x:Type extend:ContentRender}">
            <Border Margin="5" Padding="0" x:Name="MainBorder" Background="Transparent">
                <Grid ColumnDefinitions="*" RowDefinitions="Auto, Auto">
                    <i:Interaction.Behaviors>
                        <ia:EventTriggerBehavior EventName="PointerEnter" SourceObject="{Binding #MainBorder}">
                            <ia:ChangePropertyAction TargetObject="{Binding #VideoOverlayView}" PropertyName="OnIsVisible" Value="True"/>
                        </ia:EventTriggerBehavior>
                        <ia:EventTriggerBehavior EventName="PointerLeave" SourceObject="{Binding #MainBorder}">
                            <ia:ChangePropertyAction TargetObject="{Binding #VideoOverlayView}" PropertyName="OnIsVisible" Value="False"/>
                        </ia:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                    <Grid Grid.Row="0" Margin="0 0 0 5">
                        <Image xamlTools:ImageDownloader.ImageList="{Binding RichItem.RichItemContent.VideoRenderer.Thumbnails}" Name="Thumbnail"/>
                        <controls:ThumbnailOverlayView x:Name="VideoOverlayView" DataContext="{Binding Variables.Overlay}"/>
                    </Grid>
                    <Grid Grid.Row="1" ColumnDefinitions="Auto, *" RowDefinitions="Auto, *">
                        <Image Grid.Column="0" Grid.Row="0" Width="40" Margin="0 0 3 0" IsVisible="{Binding RichItem.RichItemContent.VideoRenderer.ChannelThumbnail.Thumbnails, Converter={StaticResource BoolConverter}}"
                               xamlTools:ImageDownloader.ImageList="{Binding RichItem.RichItemContent.VideoRenderer.ChannelThumbnail.Thumbnails}"/>
                        <StackPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Orientation="Vertical" x:Name="SpText">
                            <TextBlock Classes="TextBlockItemRenderer" Text="{Binding RichItem.RichItemContent.VideoRenderer.Title.GetText}"
                                       Width="{Binding #SpText.Bounds.Width}"/>
                            <TextBlock Classes="TextBlockItemRenderer"
                                       Text="{Binding RichItem.RichItemContent.VideoRenderer.OwnerText.GetText}"
                                       Foreground="LightBlue" FontSize="{DynamicResource FontSizeSmall}"/>
                            <WrapPanel Orientation="Horizontal" x:Name="WpText">
                                <TextBlock Classes="TextBlockItemRenderer" Foreground="LightGray"
                                           FontSize="{DynamicResource FontSizeSmall}"
                                           Width="{Binding #WpText.Bounds.Width}">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} - {1}">
                                            <Binding Path="RichItem.RichItemContent.VideoRenderer.ShortViewCountText.GetText"/>
                                            <Binding Path="RichItem.RichItemContent.VideoRenderer.PublishedTimeText.GetText" FallbackValue="LIVE"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </WrapPanel>
                        </StackPanel>
                    </Grid>
                </Grid>
        </Border>
        </DataTemplate> <!-- Video renderer -->
        <DataTemplate x:Key="{x:Type renderers:RadioRenderer}" DataType="{x:Type extend:ContentRender}">
            <Border Margin="5" Padding="0" Background="Transparent" x:Name="RadioMainBorder">
                <Grid ColumnDefinitions="*" RowDefinitions="Auto, Auto">
                    <i:Interaction.Behaviors>
                        <ia:EventTriggerBehavior EventName="PointerEnter" SourceObject="{Binding #RadioMainBorder}">
                            <ia:ChangePropertyAction TargetObject="{Binding #RadioOverlayView}" PropertyName="OnIsVisible" Value="True"/>
                        </ia:EventTriggerBehavior>
                        <ia:EventTriggerBehavior EventName="PointerLeave" SourceObject="{Binding #RadioMainBorder}">
                            <ia:ChangePropertyAction TargetObject="{Binding #RadioOverlayView}" PropertyName="OnIsVisible" Value="False"/>
                        </ia:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                    <Grid Grid.Row="0" Margin="0 0 0 5">
                        <Image xamlTools:ImageDownloader.ImageList="{Binding RichItem.RichItemContent.RadioRenderer.Thumbnails}"/>
                        <controls:ThumbnailOverlayView x:Name="RadioOverlayView" DataContext="{Binding Variables.Overlay}"/>
                    </Grid>
                    <Grid Grid.Row="1" ColumnDefinitions="Auto" RowDefinitions="Auto, Auto" x:Name="gText">
                        <TextBlock Grid.Row="0" Classes="TextBlockItemRenderer"
                                   Text="{Binding RichItem.RichItemContent.RadioRenderer.Title.GetText}"
                                   Width="{Binding #gText.Bounds.Width}"/>
                        <TextBlock Grid.Row="1" Classes="TextBlockItemRenderer"
                                   Text="{Binding RichItem.RichItemContent.RadioRenderer.VideoCountText.GetText}"
                                   Foreground="LightBlue"/>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate> <!-- Radio renderer-->
        <DataTemplate x:Key="{x:Type renderers:DisplayAdRenderer}" DataType="{x:Type extend:ContentRender}">
            <Border Margin="5" Padding="0" Background="Transparent" x:Name="AdMainBorder">
                <Grid ColumnDefinitions="*" RowDefinitions="Auto, Auto">
                    <Grid Grid.Row="0" Margin="0 0 0 5" x:Name="adgImage">
                        <Image xamlTools:ImageDownloader.ImageList="{Binding RichItem.RichItemContent.DisplayAdRenderer.Image}"/>
                    </Grid>
                    <Grid Grid.Row="1" ColumnDefinitions="*" RowDefinitions="Auto, *">
                        <TextBlock Grid.Row="0" Classes="TextBlockItemRenderer"
                                   Text="{Binding RichItem.RichItemContent.DisplayAdRenderer.TitleText.GetText}"
                                   Width="{Binding #adgImage.Bounds.Height}"/>
                        <TextBlock Grid.Row="1" Classes="TextBlockItemRenderer"
                                   Text="{Binding RichItem.RichItemContent.DisplayAdRenderer.BodyText.GetText}"
                                   Foreground="Red" Width="{Binding #adgImage.Bounds.Height}"/>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate> <!-- Ad renderer -->
        <DataTemplate x:Key="{x:Type renderers:ContinuationItemRenderer}" DataType="{x:Type extend:ContentRender}">
            <Grid Margin="5">
                <TextBlock Text="Continuation" FontSize="15" Foreground="{DynamicResource ForegroundBrush}"/>
            </Grid>
        </DataTemplate> <!-- Continuation -->
        <DataTemplate x:Key="{x:Type renderers:InlineSurveyRenderer}" DataType="{x:Type extend:ContentRender}">
            <Grid RowDefinitions="*">
                <Border BorderThickness="1" BorderBrush="Yellow">
                    <TextBlock Text="Survey renderer!" FontSize="20" Foreground="White"/>
                </Border>
            </Grid>
        </DataTemplate> <!-- Inline survey -->
        <DataTemplate x:Key="{x:Type renderers:CompactPromotedItemRenderer}" DataType="{x:Type extend:ContentRender}">
            <Border BorderThickness="0 3" BorderBrush="Gray" Margin="0 5" Padding="0 20">
                <Grid ColumnDefinitions="Auto, *" RowDefinitions="*">
                    <Image Grid.Column="0" Width="100"
                           xamlTools:ImageDownloader.ImageList="{Binding RichSection.RichSectionContent.PromotedItemRenderer.Thumbnails}"/>
                    <StackPanel Grid.Column="1" Orientation="Vertical" Margin="10 0">
                        <TextBlock Text="{Binding RichSection.RichSectionContent.PromotedItemRenderer.Title.GetText}"
                                   FontSize="{DynamicResource FontSizeLarge}" Foreground="{DynamicResource ForegroundBrush}"/>
                        <TextBlock Text="{Binding RichSection.RichSectionContent.PromotedItemRenderer.Subtitle.GetText}"
                                   FontSize="{DynamicResource FontSizeSmall}" Foreground="{DynamicResource ForegroundBrush}"
                                   Margin="3"/>
                    </StackPanel>
                </Grid>
            </Border>
        </DataTemplate> <!-- Promoted renderer -->
        <DataTemplate x:Key="{x:Type renderers:RichShelfRenderer}" DataType="{x:Type extend:ContentRender}">
            <Border BorderThickness="0 3" BorderBrush="Gray" Margin="0 5">
                <Grid ColumnDefinitions="Auto, *" RowDefinitions="Auto, *">
                    <Image xamlTools:ImageDownloader.ImageList="{Binding RichSection.RichSectionContent.RichShelfRenderer.Thumbnails}" Width="30"
                           Grid.Column="0" Grid.Row="0" IsVisible="{Binding RichSection.RichSectionContent.RichShelfRenderer.Thumbnails, Converter={StaticResource BoolConverter}}"/>
                    <StackPanel Grid.Column="1" Grid.Row="0" Spacing="3" Margin="2">
                        <TextBlock Text="{Binding RichSection.RichSectionContent.RichShelfRenderer.Title.GetText}"
                                           Foreground="{DynamicResource ForegroundBrush}" FontSize="{DynamicResource FontSizeLarge}"/>
                        <TextBlock Text="{Binding RichSection.RichSectionContent.RichShelfRenderer.Subtitle.GetText}"
                                   Foreground="Gray" FontSize="{DynamicResource FontSizeNormal}"/>
                    </StackPanel>
                    <controls:HomeContentListBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"
                                                 ContentItemList="{Binding RichSection.RichSectionContent.RichShelfRenderer.Contents}"/>
                </Grid>
            </Border>
        </DataTemplate> <!-- Rich shelf renderer -->
        <!-- Guide list templates -->
        <DataTemplate x:Key="{x:Type extend:GuideSection}" DataType="{x:Type renderers:GuideItemRenderer}">
            <Border BorderThickness="0 0 0 0.5" BorderBrush="Gray" Padding="0 5">
                <Grid ColumnDefinitions="*" RowDefinitions="Auto, Auto">
                    <TextBlock Grid.Row="0" Text="{Binding GuideSection.FormattedTitle.GetText}"
                               FontSize="{DynamicResource FontSizeBig}" Margin="10 0"/>
                    <ItemsPresenter Classes="GuideEntryList" Grid.Row="1" Items="{Binding GuideSection.Items}"/>
                </Grid>
            </Border>
        </DataTemplate> <!-- Guide section -->
        <DataTemplate x:Key="{x:Type extend:GuideSubscriptionSection}" DataType="{x:Type renderers:GuideItemRenderer}">
            <Border BorderThickness="0 0 0 0.5" BorderBrush="Gray" Padding="0 5">
                <Grid ColumnDefinitions="*" RowDefinitions="Auto, Auto">
                    <TextBlock Grid.Row="0" Text="{Binding GuideSubscriptionSection.FormattedTitle.GetText}"
                               FontSize="{DynamicResource FontSizeBig}" Margin="10 0"/>
                    <ItemsPresenter Classes="GuideEntryList" Grid.Row="1" Items="{Binding GuideSubscriptionSection.Items}"/>
                </Grid>
            </Border>
        </DataTemplate> <!-- Guide subscription section -->
        
        <DataTemplate x:Key="{x:Type renderers:GuideEntryRenderer}" DataType="{x:Type extend:GuideEntry}">
            <Border BorderThickness="0" Background="Transparent" x:Name="EntryMainBorder"
                    ToolTip.Tip="{Binding GuideEntryRenderer.Accessibility.GetText}">
                <i:Interaction.Behaviors>
                    <ia:EventTriggerBehavior EventName="PointerEnter" SourceObject="{Binding #EntryMainBorder}">
                        <ia:ChangePropertyAction TargetObject="{Binding #EntryMainBorder}" PropertyName="Background" Value="Gray"/>
                    </ia:EventTriggerBehavior>
                    <ia:EventTriggerBehavior EventName="PointerLeave" SourceObject="{Binding #EntryMainBorder}">
                        <ia:ChangePropertyAction TargetObject="{Binding #EntryMainBorder}" PropertyName="Background" Value="Transparent"/>
                    </ia:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <Grid ColumnDefinitions="Auto, Auto, Auto, *, Auto" RowDefinitions="35" Margin="10 0">
                    <Image Grid.Column="0" IsVisible="{Binding GuideEntryRenderer.Thumbnails, Converter={StaticResource BoolConverter}}"
                           xamlTools:ImageDownloader.ImageList="{Binding GuideEntryRenderer.Thumbnails}" Margin="0 3"/>
                    <Path Grid.Column="1" IsVisible="{Binding GuideEntryRenderer.Icon, Converter={StaticResource BoolConverter}}"
                          Data="{Binding GuideEntryRenderer.Icon, Converter={StaticResource IconConverter}}"
                          Fill="{DynamicResource ForegroundBrush}" Margin="5 0" Width="20"
                          Stretch="Uniform" VerticalAlignment="Center"/>
                    <TextBlock Grid.Column="2" Text="{Binding GuideEntryRenderer.FormattedTitle.GetText}"
                               VerticalAlignment="Center" Margin="5 0"/>
                    <Path Grid.Column="4" IsVisible="{Binding GuideEntryRenderer.Badges.LiveBroadcasting, FallbackValue=False}" Fill="LightBlue"
                          Data="{Binding GuideEntryRenderer.Badges, Converter={StaticResource IconConverter}}"
                          VerticalAlignment="Center"/>
                </Grid>
            </Border>
        </DataTemplate> <!-- Guide entry -->
        <DataTemplate x:Key="{x:Type renderers:GuideCollapsibleEntryRenderer}" DataType="{x:Type extend:GuideEntry}">
            <Border BorderThickness="0" Background="Transparent">
                <!-- Need to get this virtualized for performance -->
                <ItemsPresenter IsVisible="False" Classes="GuideEntryList" Items="{Binding GuideCollapsibleEntryRenderer.ExpandableItems}"/>
            </Border>
        </DataTemplate> <!-- Guide collapsible entry -->
        <DataTemplate x:Key="{x:Type renderers:GuideDownloadsEntryRenderer}" DataType="{x:Type extend:GuideEntry}">
            <Border>
                
            </Border>
        </DataTemplate> <!-- Guide download entry -->
        <DataTemplate x:Key="{x:Type renderers:GuideCollapsibleSectionEntryRenderer}" DataType="{x:Type extend:GuideEntry}">
            <Border>
                
            </Border>
        </DataTemplate> <!-- Guide collapsible section -->
    </Styles.Resources>
</Styles>